import React, { useState, useEffect } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { motion, AnimatePresence } from "framer-motion";
import {
	Package,
	Weight,
	Boxes,
	ArrowLeft,
	Save,
	Loader2,
	AlertCircle,
	AlertTriangle,
	Thermometer,
	FileText,
	Shield,
	Info,
} from "lucide-react";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Checkbox } from "@/components/ui/checkbox";
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";

import { useGetCargoQuery, useUpdateCargoMutation } from "@/shared/api/cargoSlice";
import { ROUTES } from "@/shared/constants";

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const cargoEditSchema = z.object({
	name: z.string().min(2, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"),
	description: z.string().optional(),
	cargoType: z.enum(["STANDARD", "FRAGILE", "HAZARDOUS", "PERISHABLE", "OVERSIZED"]),
	weightKg: z.number().min(0.1, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
	volumeM3: z.number().min(0, "–û–±—ä–µ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"),
	isHazardous: z.boolean().default(false),
	hazardClass: z.string().optional(),
	unNumber: z.string().optional(),
	packingGroup: z.enum(["I", "II", "III"]).optional(),
	temperatureMin: z.number().optional(),
	temperatureMax: z.number().optional(),
	isTemperatureControlled: z.boolean().default(false),
	specialInstructions: z.string().optional(),
	status: z.enum(["READY", "IN_TRANSIT", "DELIVERED", "DELAYED"]),
});

type CargoEditForm = z.infer<typeof cargoEditSchema>;

const containerVariants = {
	hidden: { opacity: 0, y: 20 },
	visible: {
		opacity: 1,
		y: 0,
		transition: {
			duration: 0.6,
			staggerChildren: 0.1,
		},
	},
};

const itemVariants = {
	hidden: { opacity: 0, y: 20 },
	visible: { opacity: 1, y: 0 },
};

const bannerVariants = {
	hidden: { opacity: 0, scale: 0.95, y: -10 },
	visible: {
		opacity: 1,
		scale: 1,
		y: 0,
		transition: { duration: 0.4, ease: "easeOut" },
	},
	exit: {
		opacity: 0,
		scale: 0.95,
		y: -10,
		transition: { duration: 0.3 },
	},
};

export function EditCargoPage() {
	const { id } = useParams<{ id: string }>();
	const navigate = useNavigate();
	const { toast } = useToast();
	const [activeTab, setActiveTab] = useState("basic");

	// RTK Query hooks
	const { data: cargo, isLoading, error } = useGetCargoQuery(Number(id));
	const [updateCargo, { isLoading: isUpdating }] = useUpdateCargoMutation();

	// –§–æ—Ä–º–∞
	const form = useForm<CargoEditForm>({
		resolver: zodResolver(cargoEditSchema),
		defaultValues: {
			name: "",
			description: "",
			cargoType: "STANDARD",
			weightKg: 0,
			volumeM3: 0,
			isHazardous: false,
			hazardClass: "",
			unNumber: "",
			temperatureMin: 0,
			temperatureMax: 0,
			isTemperatureControlled: false,
			specialInstructions: "",
			status: "READY",
		},
	});

	// –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞
	const isHazardous = form.watch("isHazardous");
	const isTemperatureControlled = form.watch("isTemperatureControlled");

	// –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞
	useEffect(() => {
		if (cargo) {
			form.reset({
				name: cargo.name || "",
				description: cargo.description || "",
				cargoType: cargo.cargoType || "STANDARD",
				weightKg: cargo.weightKg || 0,
				volumeM3: cargo.volumeM3 || 0,
				isHazardous: cargo.isHazardous || false,
				hazardClass: cargo.hazardClass || "",
				unNumber: cargo.unNumber || "",
				packingGroup: cargo.packingGroup,
				temperatureMin: cargo.temperatureMin || 0,
				temperatureMax: cargo.temperatureMax || 0,
				isTemperatureControlled: cargo.isTemperatureControlled || false,
				specialInstructions: cargo.specialInstructions || "",
				status: cargo.status || "READY",
			});
		}
	}, [cargo, form]);

	const onSubmit = async (data: CargoEditForm) => {
		try {
			await updateCargo({
				id: Number(id),
				data,
			}).unwrap();

			toast({
				title: "–£—Å–ø–µ—à–Ω–æ!",
				description: "–î–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
				duration: 3000,
			});

			navigate(`/cargo/${id}`);
		} catch (error) {
			toast({
				title: "–û—à–∏–±–∫–∞",
				description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞",
				variant: "destructive",
				duration: 5000,
			});
		}
	};

	const getStatusColor = (status: string) => {
		switch (status) {
			case "READY":
				return "bg-green-100 text-green-800";
			case "IN_TRANSIT":
				return "bg-blue-100 text-blue-800";
			case "DELIVERED":
				return "bg-purple-100 text-purple-800";
			case "DELAYED":
				return "bg-red-100 text-red-800";
			default:
				return "bg-gray-100 text-gray-800";
		}
	};

	const getCargoTypeIcon = (type: string) => {
		switch (type) {
			case "FRAGILE":
				return "üîç";
			case "HAZARDOUS":
				return "‚ö†Ô∏è";
			case "PERISHABLE":
				return "‚ùÑÔ∏è";
			case "OVERSIZED":
				return "üì¶";
			default:
				return "üìã";
		}
	};

	if (isLoading) {
		return (
			<div className="container mx-auto p-6 space-y-6">
				<Skeleton className="h-8 w-1/4" />
				<Card>
					<CardHeader>
						<Skeleton className="h-6 w-1/3" />
						<Skeleton className="h-4 w-1/2" />
					</CardHeader>
					<CardContent className="space-y-4">
						<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
							{Array.from({ length: 6 }).map((_, i) => (
								<div key={i} className="space-y-2">
									<Skeleton className="h-4 w-1/4" />
									<Skeleton className="h-10 w-full" />
								</div>
							))}
						</div>
					</CardContent>
				</Card>
			</div>
		);
	}

	if (error) {
		return (
			<motion.div
				className="container mx-auto p-6"
				initial={{ opacity: 0, y: 20 }}
				animate={{ opacity: 1, y: 0 }}
			>
				<Alert variant="destructive">
					<AlertCircle className="h-4 w-4" />
					<AlertDescription>
						–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
					</AlertDescription>
				</Alert>
			</motion.div>
		);
	}

	return (
		<motion.div
			className="container mx-auto p-6 space-y-6"
			variants={containerVariants}
			initial="hidden"
			animate="visible"
		>
			{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
			<motion.div variants={itemVariants} className="flex items-center gap-4">
				<Link to={`/cargo/${id}`}>
					<Button variant="outline" size="icon" className="hover-lift">
						<ArrowLeft className="h-4 w-4" />
					</Button>
				</Link>
				<div>
					<h1 className="text-3xl font-bold text-gradient">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞</h1>
					<p className="text-muted-foreground">{cargo?.name || `–ì—Ä—É–∑ #${id}`}</p>
				</div>
				{cargo?.status && (
					<Badge className={`animate-fade-in ${getStatusColor(cargo.status)}`}>
						{getCargoTypeIcon(cargo.cargoType || "STANDARD")} {cargo.status}
					</Badge>
				)}
			</motion.div>

			{/* Warning Banner –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ */}
			<AnimatePresence>
				{isHazardous && (
					<motion.div
						variants={bannerVariants}
						initial="hidden"
						animate="visible"
						exit="exit"
					>
						<Alert className="border-orange-200 bg-orange-50">
							<AlertTriangle className="h-4 w-4 text-orange-600" />
							<AlertDescription className="text-orange-800">
								<strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –ì—Ä—É–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –æ–ø–∞—Å–Ω—ã–π.
								T—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ
								–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ADR.
							</AlertDescription>
						</Alert>
					</motion.div>
				)}
			</AnimatePresence>

			{/* –§–æ—Ä–º–∞ */}
			<motion.div variants={itemVariants}>
				<Card className="claude-card">
					<Form {...form}>
						<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
							<Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
								<TabsList className="grid w-full grid-cols-3">
									<TabsTrigger value="basic" className="flex items-center gap-2">
										<Package className="h-4 w-4" />
										–û—Å–Ω–æ–≤–Ω–æ–µ
									</TabsTrigger>
									<TabsTrigger value="safety" className="flex items-center gap-2">
										<Shield className="h-4 w-4" />
										–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
									</TabsTrigger>
									<TabsTrigger
										value="conditions"
										className="flex items-center gap-2"
									>
										<Thermometer className="h-4 w-4" />
										–£—Å–ª–æ–≤–∏—è
									</TabsTrigger>
								</TabsList>

								<AnimatePresence mode="wait">
									<TabsContent value="basic" asChild>
										<motion.div
											key="basic"
											initial={{ opacity: 0, x: -20 }}
											animate={{ opacity: 1, x: 0 }}
											exit={{ opacity: 0, x: 20 }}
											transition={{ duration: 0.3 }}
											className="space-y-6"
										>
											<CardHeader>
												<CardTitle className="flex items-center gap-2">
													<Package className="h-5 w-5" />
													–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
												</CardTitle>
												<CardDescription>
													–ù–∞–∑–≤–∞–Ω–∏–µ, —Ç–∏–ø –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–∑–∞
												</CardDescription>
											</CardHeader>
											<CardContent className="space-y-4">
												<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
													<FormField
														control={form.control}
														name="name"
														render={({ field }) => (
															<FormItem className="col-span-full">
																<FormLabel className="flex items-center gap-2">
																	<Package className="h-4 w-4" />
																	–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞
																</FormLabel>
																<FormControl>
																	<Input
																		{...field}
																		placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞"
																		className="transition-all duration-200 focus:scale-[1.02]"
																	/>
																</FormControl>
																<FormMessage />
															</FormItem>
														)}
													/>

													<FormField
														control={form.control}
														name="cargoType"
														render={({ field }) => (
															<FormItem>
																<FormLabel>–¢–∏–ø –≥—Ä—É–∑–∞</FormLabel>
																<Select
																	onValueChange={field.onChange}
																	defaultValue={field.value}
																>
																	<FormControl>
																		<SelectTrigger className="transition-all duration-200 focus:scale-[1.02]">
																			<SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø" />
																		</SelectTrigger>
																	</FormControl>
																	<SelectContent>
																		<SelectItem value="STANDARD">
																			üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
																		</SelectItem>
																		<SelectItem value="FRAGILE">
																			üîç –•—Ä—É–ø–∫–∏–π
																		</SelectItem>
																		<SelectItem value="HAZARDOUS">
																			‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–π
																		</SelectItem>
																		<SelectItem value="PERISHABLE">
																			‚ùÑÔ∏è –°–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏–π—Å—è
																		</SelectItem>
																		<SelectItem value="OVERSIZED">
																			üì¶ –ù–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π
																		</SelectItem>
																	</SelectContent>
																</Select>
																<FormMessage />
															</FormItem>
														)}
													/>

													<FormField
														control={form.control}
														name="status"
														render={({ field }) => (
															<FormItem>
																<FormLabel>–°—Ç–∞—Ç—É—Å</FormLabel>
																<Select
																	onValueChange={field.onChange}
																	defaultValue={field.value}
																>
																	<FormControl>
																		<SelectTrigger className="transition-all duration-200 focus:scale-[1.02]">
																			<SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" />
																		</SelectTrigger>
																	</FormControl>
																	<SelectContent>
																		<SelectItem value="READY">
																			–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
																		</SelectItem>
																		<SelectItem value="IN_TRANSIT">
																			–í –ø—É—Ç–∏
																		</SelectItem>
																		<SelectItem value="DELIVERED">
																			–î–æ—Å—Ç–∞–≤–ª–µ–Ω
																		</SelectItem>
																		<SelectItem value="DELAYED">
																			–ó–∞–¥–µ—Ä–∂–∞–Ω
																		</SelectItem>
																	</SelectContent>
																</Select>
																<FormMessage />
															</FormItem>
														)}
													/>

													<FormField
														control={form.control}
														name="weightKg"
														render={({ field }) => (
															<FormItem>
																<FormLabel className="flex items-center gap-2">
																	<Weight className="h-4 w-4" />
																	–í–µ—Å (–∫–≥)
																</FormLabel>
																<FormControl>
																	<Input
																		{...field}
																		type="number"
																		step="0.1"
																		min="0.1"
																		placeholder="0.0"
																		onChange={(e) =>
																			field.onChange(
																				parseFloat(
																					e.target.value
																				) || 0
																			)
																		}
																		className="transition-all duration-200 focus:scale-[1.02]"
																	/>
																</FormControl>
																<FormMessage />
															</FormItem>
														)}
													/>

													<FormField
														control={form.control}
														name="volumeM3"
														render={({ field }) => (
															<FormItem>
																<FormLabel className="flex items-center gap-2">
																	<Boxes className="h-4 w-4" />
																	–û–±—ä–µ–º (–º¬≥)
																</FormLabel>
																<FormControl>
																	<Input
																		{...field}
																		type="number"
																		step="0.01"
																		min="0"
																		placeholder="0.00"
																		onChange={(e) =>
																			field.onChange(
																				parseFloat(
																					e.target.value
																				) || 0
																			)
																		}
																		className="transition-all duration-200 focus:scale-[1.02]"
																	/>
																</FormControl>
																<FormMessage />
															</FormItem>
														)}
													/>
												</div>

												<FormField
													control={form.control}
													name="description"
													render={({ field }) => (
														<FormItem>
															<FormLabel className="flex items-center gap-2">
																<FileText className="h-4 w-4" />
																–û–ø–∏—Å–∞–Ω–∏–µ
															</FormLabel>
															<FormControl>
																<Textarea
																	{...field}
																	placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞"
																	className="transition-all duration-200 focus:scale-[1.01] min-h-[100px]"
																/>
															</FormControl>
															<FormMessage />
														</FormItem>
													)}
												/>
											</CardContent>
										</motion.div>
									</TabsContent>

									<TabsContent value="safety" asChild>
										<motion.div
											key="safety"
											initial={{ opacity: 0, x: -20 }}
											animate={{ opacity: 1, x: 0 }}
											exit={{ opacity: 0, x: 20 }}
											transition={{ duration: 0.3 }}
											className="space-y-6"
										>
											<CardHeader>
												<CardTitle className="flex items-center gap-2">
													<Shield className="h-5 w-5" />
													–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
												</CardTitle>
												<CardDescription>
													–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
												</CardDescription>
											</CardHeader>
											<CardContent className="space-y-6">
												<FormField
													control={form.control}
													name="isHazardous"
													render={({ field }) => (
														<FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
															<FormControl>
																<Checkbox
																	checked={field.value}
																	onCheckedChange={field.onChange}
																/>
															</FormControl>
															<div className="space-y-1 leading-none">
																<FormLabel className="flex items-center gap-2">
																	<AlertTriangle className="h-4 w-4 text-orange-600" />
																	–û–ø–∞—Å–Ω—ã–π –≥—Ä—É–∑
																</FormLabel>
																<p className="text-sm text-muted-foreground">
																	–ì—Ä—É–∑ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ
																	–æ–±—Ä–∞—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ ADR
																</p>
															</div>
														</FormItem>
													)}
												/>

												<AnimatePresence>
													{isHazardous && (
														<motion.div
															initial={{ opacity: 0, height: 0 }}
															animate={{ opacity: 1, height: "auto" }}
															exit={{ opacity: 0, height: 0 }}
															transition={{ duration: 0.3 }}
															className="space-y-4"
														>
															<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
																<FormField
																	control={form.control}
																	name="hazardClass"
																	render={({ field }) => (
																		<FormItem>
																			<FormLabel>
																				–ö–ª–∞—Å—Å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
																			</FormLabel>
																			<FormControl>
																				<Input
																					{...field}
																					placeholder="1.1, 2.1, 3..."
																					className="transition-all duration-200 focus:scale-[1.02]"
																				/>
																			</FormControl>
																			<FormMessage />
																		</FormItem>
																	)}
																/>

																<FormField
																	control={form.control}
																	name="unNumber"
																	render={({ field }) => (
																		<FormItem>
																			<FormLabel>
																				UN –Ω–æ–º–µ—Ä
																			</FormLabel>
																			<FormControl>
																				<Input
																					{...field}
																					placeholder="UN1234"
																					className="transition-all duration-200 focus:scale-[1.02]"
																				/>
																			</FormControl>
																			<FormMessage />
																		</FormItem>
																	)}
																/>

																<FormField
																	control={form.control}
																	name="packingGroup"
																	render={({ field }) => (
																		<FormItem>
																			<FormLabel>
																				–ì—Ä—É–ø–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏
																			</FormLabel>
																			<Select
																				onValueChange={
																					field.onChange
																				}
																				defaultValue={
																					field.value
																				}
																			>
																				<FormControl>
																					<SelectTrigger className="transition-all duration-200 focus:scale-[1.02]">
																						<SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É" />
																					</SelectTrigger>
																				</FormControl>
																				<SelectContent>
																					<SelectItem value="I">
																						I - –í—ã—Å–æ–∫–∞—è
																						–æ–ø–∞—Å–Ω–æ—Å—Ç—å
																					</SelectItem>
																					<SelectItem value="II">
																						II - –°—Ä–µ–¥–Ω—è—è
																						–æ–ø–∞—Å–Ω–æ—Å—Ç—å
																					</SelectItem>
																					<SelectItem value="III">
																						III - –ù–∏–∑–∫–∞—è
																						–æ–ø–∞—Å–Ω–æ—Å—Ç—å
																					</SelectItem>
																				</SelectContent>
																			</Select>
																			<FormMessage />
																		</FormItem>
																	)}
																/>
															</div>
														</motion.div>
													)}
												</AnimatePresence>
											</CardContent>
										</motion.div>
									</TabsContent>

									<TabsContent value="conditions" asChild>
										<motion.div
											key="conditions"
											initial={{ opacity: 0, x: -20 }}
											animate={{ opacity: 1, x: 0 }}
											exit={{ opacity: 0, x: 20 }}
											transition={{ duration: 0.3 }}
											className="space-y-6"
										>
											<CardHeader>
												<CardTitle className="flex items-center gap-2">
													<Thermometer className="h-5 w-5" />
													–£—Å–ª–æ–≤–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
												</CardTitle>
												<CardDescription>
													–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
												</CardDescription>
											</CardHeader>
											<CardContent className="space-y-6">
												<FormField
													control={form.control}
													name="isTemperatureControlled"
													render={({ field }) => (
														<FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
															<FormControl>
																<Checkbox
																	checked={field.value}
																	onCheckedChange={field.onChange}
																/>
															</FormControl>
															<div className="space-y-1 leading-none">
																<FormLabel className="flex items-center gap-2">
																	<Thermometer className="h-4 w-4 text-blue-600" />
																	–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
																</FormLabel>
																<p className="text-sm text-muted-foreground">
																	–ì—Ä—É–∑ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è
																	–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
																</p>
															</div>
														</FormItem>
													)}
												/>

												<AnimatePresence>
													{isTemperatureControlled && (
														<motion.div
															initial={{ opacity: 0, height: 0 }}
															animate={{ opacity: 1, height: "auto" }}
															exit={{ opacity: 0, height: 0 }}
															transition={{ duration: 0.3 }}
															className="space-y-4"
														>
															<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
																<FormField
																	control={form.control}
																	name="temperatureMin"
																	render={({ field }) => (
																		<FormItem>
																			<FormLabel>
																				–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è
																				—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)
																			</FormLabel>
																			<FormControl>
																				<Input
																					{...field}
																					type="number"
																					step="0.1"
																					placeholder="-18"
																					onChange={(e) =>
																						field.onChange(
																							parseFloat(
																								e
																									.target
																									.value
																							) || 0
																						)
																					}
																					className="transition-all duration-200 focus:scale-[1.02]"
																				/>
																			</FormControl>
																			<FormMessage />
																		</FormItem>
																	)}
																/>

																<FormField
																	control={form.control}
																	name="temperatureMax"
																	render={({ field }) => (
																		<FormItem>
																			<FormLabel>
																				–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
																				—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)
																			</FormLabel>
																			<FormControl>
																				<Input
																					{...field}
																					type="number"
																					step="0.1"
																					placeholder="4"
																					onChange={(e) =>
																						field.onChange(
																							parseFloat(
																								e
																									.target
																									.value
																							) || 0
																						)
																					}
																					className="transition-all duration-200 focus:scale-[1.02]"
																				/>
																			</FormControl>
																			<FormMessage />
																		</FormItem>
																	)}
																/>
															</div>
														</motion.div>
													)}
												</AnimatePresence>

												<FormField
													control={form.control}
													name="specialInstructions"
													render={({ field }) => (
														<FormItem>
															<FormLabel className="flex items-center gap-2">
																<Info className="h-4 w-4" />
																–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
															</FormLabel>
															<FormControl>
																<Textarea
																	{...field}
																	placeholder="–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–≥—Ä—É–∑–∫–µ, —Ä–∞–∑–≥—Ä—É–∑–∫–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ..."
																	className="transition-all duration-200 focus:scale-[1.01] min-h-[100px]"
																/>
															</FormControl>
															<FormMessage />
														</FormItem>
													)}
												/>
											</CardContent>
										</motion.div>
									</TabsContent>
								</AnimatePresence>
							</Tabs>

							{/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
							<motion.div
								variants={itemVariants}
								className="flex justify-between items-center pt-6 border-t"
							>
								<Link to={`/cargo/${id}`}>
									<Button variant="outline">–û—Ç–º–µ–Ω–∞</Button>
								</Link>

								<Button
									type="submit"
									disabled={isUpdating}
									className="interactive-button-claude min-w-[120px]"
								>
									{isUpdating ? (
										<>
											<Loader2 className="mr-2 h-4 w-4 animate-spin" />
											–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
										</>
									) : (
										<>
											<Save className="mr-2 h-4 w-4" />
											–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
										</>
									)}
								</Button>
							</motion.div>
						</form>
					</Form>
				</Card>
			</motion.div>
		</motion.div>
	);
}

export default EditCargoPage;
