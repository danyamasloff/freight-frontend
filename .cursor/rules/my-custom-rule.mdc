---
description: 
globs: 
alwaysApply: true
---
# Project Rules for Cursor AI

## Core Principles
- NEVER duplicate existing files or logic
- ALWAYS modify existing files when adding related functionality
- CREATE new files only for genuinely new features or components
- NO README.md files generation
- Focus on production-ready, maintainable code

## Tech Stack Requirements
- **Runtime**: Bun (latest)
- **Framework**: React 18+ with TypeScript 5+
- **Build Tool**: Vite (latest)
- **Maps**: pbe-react-yandex-maps (latest)
- **Styling**: Modern CSS-in-JS or CSS modules
- **State Management**: Zustand or React Query for server state

## File Management Rules (FSD)
1. **Before creating new files**: Check existing slices in appropriate layer
2. **Features in Pages**: Pages export and compose features, no business logic
3. **New features**: Create in features/ layer with proper slice structure
4. **Shared components**: Only truly reusable code goes to shared/ui
5. **File naming**: kebab-case for files, PascalCase for React components
6. **Index exports**: Each slice must have index.ts with public API

## Code Standards
- **TypeScript**: Strict mode, explicit types, no `any`
- **Components**: Functional components with hooks
- **Styling**: CSS modules or styled-components, mobile-first responsive
- **Performance**: React.memo, useMemo, useCallback where beneficial
- **Error handling**: Proper error boundaries and try-catch blocks

## Design Requirements
- **Visual Style**: Claude.ai inspired - clean, minimal, modern
- **Color Scheme**: Light/dark mode support
- **Typography**: System fonts, proper hierarchy
- **Layout**: Grid/Flexbox, consistent spacing
- **Animations**: Subtle, performance-optimized
- **Accessibility**: WCAG 2.1 AA compliance

## FSD Architecture Structure
```
src/
├── app/              # App initialization, providers, routing
├── pages/            # Route components with feature exports
├── widgets/          # Independent UI blocks
├── features/         # Business logic features
├── entities/         # Business entities
├── shared/           # Reusable code
│   ├── ui/           # UI kit components
│   ├── lib/          # Utilities, hooks
│   ├── api/          # API layer
│   └── config/       # Configuration
└── assets/           # Static assets
```

## FSD Rules
- **Pages**: Export features, handle routing logic
- **Features**: Business logic, self-contained functionality
- **Entities**: Domain models, business entities logic
- **Shared**: Cross-layer reusable code only
- **Import Rules**: Higher layers can import from lower, never reverse
- **Slices**: Each feature/entity/widget is a slice with index.ts export

## FSD Import Rules
- **app** → pages, widgets, features, entities, shared
- **pages** → widgets, features, entities, shared (NO direct UI logic)
- **widgets** → features, entities, shared
- **features** → entities, shared
- **entities** → shared
- **shared** → external libraries only

## Slice Structure Example
```
features/auth/
├── model/           # Business logic, stores
├── ui/              # Feature UI components  
├── api/             # Feature API calls
└── index.ts         # Public API exports
```

## Performance Guidelines
- Bundle splitting with dynamic imports
- Image optimization and lazy loading
- Proper React reconciliation keys
- Memoization for expensive calculations

## Maps Integration (pbe-react-yandex-maps)
- Lazy load map components
- Proper cleanup of map instances
- TypeScript definitions for map props
- Responsive map containers

## Quality Checklist
- [ ] No code duplication
- [ ] TypeScript strict compliance
- [ ] Responsive design implementation
- [ ] Performance optimizations applied
- [ ] Error handling implemented
- [ ] Accessibility features included

## Forbidden Actions
- Creating README.md files
- Duplicating existing components
- Using deprecated React patterns
- Ignoring existing file structure
- Creating unnecessary abstractions

## Development Focus
- Production-ready code quality
- Future-proof architecture decisions
- Clean, maintainable codebase

- Optimal developer experience